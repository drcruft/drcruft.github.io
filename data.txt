     def _handle_connect(self, path):
-        host, port_str = path.split(":", 1)
-        port = int(port_str)
-        logging.info(f"CONNECT tunnel to {host}:{port}")
-        try:
-            remote = socket.create_connection((host, port))
-            self.wfile.write(b"HTTP/1.1 200 Connection Established\r\n\r\n")
-            self._tunnel(self.connection, remote)
-        except Exception:
-            logging.exception(f"CONNECT failed to {host}:{port}")
-            self.wfile.write(b"HTTP/1.1 502 Bad Gateway\r\n\r\n")
+        host, port_str = path.split(":", 1)
+        port = int(port_str)
+        logging.info(f"CONNECT tunnel to {host}:{port}")
+
+        try:
+            # 1) Open the tunnel
+            remote = socket.create_connection((host, port))
+
+            # 2) Send a perfectly-formed CONNECT response directly on the socket
+            resp = (
+                b"HTTP/1.1 200 Connection Established\r\n"
+                b"Proxy-Agent: SimpleProxy/1.0\r\n"
+                b"\r\n"
+            )
+            # use the raw socket to avoid any buffering issues
+            self.connection.sendall(resp)
+
+            # 3) Now flush and start shuttling bytes
+            self._tunnel(self.connection, remote)
+        except Exception:
+            logging.exception(f"CONNECT failed to {host}:{port}")
+            # If we can’t open the tunnel, tell the client it’s a bad gateway
+            self.connection.sendall(b"HTTP/1.1 502 Bad Gateway\r\n\r\n")
