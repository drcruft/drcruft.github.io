import streamlit as st
from typing import List, Dict

# Initialize the page configuration for a professional look
def init_page():
    st.set_page_config(
        page_title="LLM Chat UI",
        page_icon="ðŸ’¬",
        layout="wide",
        initial_sidebar_state="collapsed"
    )

    # Optional CSS to center content and adjust max width
    st.markdown(
        """
        <style>
        .chat-container {
            max-width: 800px;
            margin: auto;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

# Render chat history stored in Session State
def render_chat(messages: List[Dict[str, str]]):
    with st.container():
        for msg in messages:
            role = msg.get("role")
            content = msg.get("content")
            # Use built-in chat message components
            if role == "user":
                st.chat_message("user").markdown(content)
            else:
                st.chat_message("assistant").markdown(content)

# Main application
def main():
    init_page()

    # Initialize session state for chat history
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Display existing chat history (oldest at top)
    render_chat(st.session_state.messages)

    # Chat input at the bottom
    user_input = st.chat_input("Type your message here...")
    if user_input:
        # Append user's message
        st.session_state.messages.append({"role": "user", "content": user_input})
        st.chat_message("user").markdown(user_input)

        # CALL YOUR LLM HERE
        # Example placeholder response (replace with actual LLM call)
        llm_response = f"You said: {user_input}"

        # Append assistant's response
        st.session_state.messages.append({"role": "assistant", "content": llm_response})
        st.chat_message("assistant").markdown(llm_response)

if __name__ == "__main__":
    main()
