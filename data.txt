import streamlit as st
import streamlit.components.v1 as components
from typing import List, Dict, Iterator
import time

# Initialize the page configuration for a professional look
def init_page():
    st.set_page_config(
        page_title="LLM Chat UI",
        page_icon="ðŸ’¬",
        layout="wide",
        initial_sidebar_state="collapsed"
    )
    st.markdown(
        """
        <style>
        .chat-container {
            max-width: 800px;
            margin: auto;
        }
        button.copy-btn {
            background-color: #1f2937;
            color: white;
            border: none;
            padding: 4px 8px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.875rem;
            margin-top: 4px;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

# Render chat history stored in Session State with copy buttons
def render_chat(messages: List[Dict[str, str]]):
    with st.container():
        for idx, msg in enumerate(messages):
            role = msg.get("role")
            content = msg.get("content")
            if role == "user":
                st.chat_message("user").markdown(content)
            else:
                # Render assistant message
                st.chat_message("assistant").markdown(content)
                # Add copy button below
                safe_content = content.replace('"', '&quot;').replace("'", "&#39;")
                html = f"""
                <button class='copy-btn' onclick="navigator.clipboard.writeText(document.getElementById('msg_{idx}').innerText)">Copy</button>
                <div id='msg_{idx}' style='display:none;'>{safe_content}</div>
                """
                components.html(html, height=40)

# Simulated streaming LLM call
def call_llm_stream(user_input: str) -> Iterator[str]:
    # TODO: Replace with your LLM streaming API
    example = ["You ", "said", ": ", user_input]
    for chunk in example:
        time.sleep(0.1)
        yield chunk

# Main application
def main():
    init_page()

    # Initialize session state for chat history
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Display existing chat history (oldest at top)
    render_chat(st.session_state.messages)

    # Chat input at the bottom
    user_input = st.chat_input("Type your message here...")
    if user_input:
        # Append user's message
        st.session_state.messages.append({"role": "user", "content": user_input})
        st.chat_message("user").markdown(user_input)

        # Stream assistant response
        assistant_msg = st.chat_message("assistant")
        full_response = ""
        for token in call_llm_stream(user_input):
            full_response += token
            assistant_msg.markdown(full_response)

        # Append final response to history
        st.session_state.messages.append({"role": "assistant", "content": full_response})

if __name__ == "__main__":
    main()
