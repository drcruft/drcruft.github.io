class ProxyHandler(StreamRequestHandler):
    def handle(self):
        client_ip, client_port = self.client_address

        # —— Peek at the request line —— 
        first_line = self.rfile.readline().decode('utf-8', errors='ignore')
        if not first_line:
            return

        method, path, protocol = first_line.strip().split()

        # —— Health‐check? respond 200 OK and drop out —— 
        if method.upper() == "GET" and path == "/":
            # drain the rest of the headers
            while True:
                line = self.rfile.readline()
                if not line or line in (b'\r\n', b'\n'):
                    break
            # send minimal OK
            resp = (
                "HTTP/1.1 200 OK\r\n"
                "Content-Length: 2\r\n"
                "Connection: close\r\n"
                "\r\n"
                "OK"
            ).encode()
            self.wfile.write(resp)
            return

        # —— Otherwise, normal logging + proxy logic —— 
        logging.info(f"{client_ip}:{client_port} → {method} {path}")
        try:
            if method.upper() == "CONNECT":
                self._handle_connect(path)
            else:
                self._handle_http(method, path, protocol)
        except Exception:
            logging.exception("Unhandled exception in request handling")
