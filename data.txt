# crew_routing.py

from crewai import Agent
from langchain.chat_models import ChatOpenAI

# ——— Base LLM pointing at local vLLM OpenAI API ———
llm = ChatOpenAI(
    base_url="http://localhost:8000/v1",
    api_key="local-api-key",
    model="command-r",
    temperature=0.3,
    max_tokens=1024,
    timeout=60,
    request_timeout=60,
)

# ——— Classifier Agent ———
classifier = Agent(
    role="router",
    goal=(
        "Given a user message, choose exactly one label: "
        "CHAT, RAG, IOC, or SPLUNK."
    ),
    system_prompt=(
        "You are a routing assistant. "
        "Output only one of: CHAT, RAG, IOC, SPLUNK."
    ),
    llm=llm,
    verbose=True,
)

# ——— Functional Agents ———
chat_agent = Agent(
    role="general_chat",
    goal="Answer general conversational queries.",
    system_prompt="You are a helpful assistant.",
    llm=llm,
    memory=True,
)

rag_agent = Agent(
    role="knowledge_search",
    goal="Perform retrieval-augmented lookup over the knowledge base.",
    system_prompt="You are an expert researcher. Use the KB to find and summarize information.",
    llm=llm,
    memory=False,
)

ioc_agent = Agent(
    role="ioc_lookup",
    goal="Lookup threat intelligence IOCs from the internal database.",
    system_prompt="You are a threat intelligence assistant. Provide IOC details when asked.",
    llm=llm,
    memory=False,
)

splunk_agent = Agent(
    role="splunk_query",
    goal="Construct and execute Splunk API queries for security events.",
    system_prompt="You are a Splunk assistant. Formulate valid Splunk queries based on user input.",
    llm=llm,
    memory=False,
)

def route_prompt(user_message: str) -> str:
    """Route the user_message through the appropriate Agent."""
    decision = classifier.respond(user_message).strip().upper()
    if decision == "CHAT":
        return chat_agent.respond(user_message)
    elif decision == "RAG":
        return rag_agent.respond(user_message)
    elif decision == "IOC":
        return ioc_agent.respond(user_message)
    elif decision == "SPLUNK":
        return splunk_agent.respond(user_message)
    # Fallback
    return chat_agent.respond(user_message)
